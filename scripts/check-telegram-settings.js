// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Telegram –±–æ—Ç–∞ –∏ —á–∞—Ç–∞
require("dotenv").config();
const fetch = (...args) =>
  import("node-fetch").then(({ default: fetch }) => fetch(...args));

// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
const botToken = process.env.NEXT_PUBLIC_TELEGRAM_BOT_TOKEN;
const chatId = process.env.NEXT_PUBLIC_TELEGRAM_CHAT_ID;

if (!botToken || !chatId) {
  console.error("–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Telegram.");
  console.error("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ —Ñ–∞–π–ª–µ .env –∏–ª–∏ .env.local –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã:");
  console.error(
    "NEXT_PUBLIC_TELEGRAM_BOT_TOKEN –∏ NEXT_PUBLIC_TELEGRAM_CHAT_ID"
  );
  process.exit(1);
}

async function checkBotToken() {
  console.log("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞...");

  try {
    const response = await fetch(
      `https://api.telegram.org/bot${botToken}/getMe`
    );
    const data = await response.json();

    if (!data.ok) {
      console.error("–û—à–∏–±–∫–∞: –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞.");
      console.error(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç API: ${data.description}`);
      process.exit(1);
    }

    console.log(`‚úÖ –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω! –ë–æ—Ç: @${data.result.username}`);
    return true;
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞:", err);
    process.exit(1);
  }
}

async function checkChatId() {
  console.log("–ü—Ä–æ–≤–µ—Ä–∫–∞ ID —á–∞—Ç–∞...");

  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç
    const response = await fetch(
      `https://api.telegram.org/bot${botToken}/sendMessage`,
      {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          chat_id: chatId,
          text: "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π —Ñ–æ—Ä–º—ã —Å–∞–π—Ç–∞. –ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–µ—Ä–Ω—ã!",
        }),
      }
    );

    const data = await response.json();

    if (!data.ok) {
      console.error("–û—à–∏–±–∫–∞: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç.");
      console.error(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç API: ${data.description}`);
      console.error("–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:");
      console.error("1. –ù–µ–≤–µ—Ä–Ω—ã–π ID —á–∞—Ç–∞");
      console.error("2. –ë–æ—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π —á–∞—Ç");
      console.error("3. –£ –±–æ—Ç–∞ –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π");
      process.exit(1);
    }

    console.log(
      "‚úÖ ID —á–∞—Ç–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω! –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ."
    );
    return true;
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ ID —á–∞—Ç–∞:", err);
    process.exit(1);
  }
}

async function runChecks() {
  console.log("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Telegram...");

  const botValid = await checkBotToken();
  if (botValid) {
    const chatValid = await checkChatId();
    if (chatValid) {
      console.log(
        "‚úÖ –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –≤–µ—Ä–Ω—ã! –§–æ—Ä–º–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ."
      );
    }
  }
}

runChecks();
