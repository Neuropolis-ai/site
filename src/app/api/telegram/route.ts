import { NextResponse } from "next/server";

// –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è Telegram
const BACKUP_BOT_TOKEN = "8020073798:AAHmXxi9XijA0z1k9JY2DzNpDI7j6ICqthI";
const BACKUP_CHAT_ID = "-1002655068247";

export async function POST(request: Request) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
    const body = await request.json();
    const { name, email, phone, message } = body;

    console.log("API –ø–æ–ª—É—á–∏–ª –¥–∞–Ω–Ω—ã–µ:", { name, phone, email });

    if (!name || !phone) {
      console.log("–û—à–∏–±–∫–∞: –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã");
      return NextResponse.json(
        { error: "–ò–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" },
        { status: 400 }
      );
    }

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏ ID —á–∞—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ
    const botToken = process.env.TELEGRAM_BOT_TOKEN || BACKUP_BOT_TOKEN;
    const chatId = process.env.TELEGRAM_CHAT_ID || BACKUP_CHAT_ID;

    console.log("–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö Telegram:");
    console.log(
      "- –¢–æ–∫–µ–Ω –∏–∑ env:",
      process.env.TELEGRAM_BOT_TOKEN ? "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" : "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    );
    console.log(
      "- ID —á–∞—Ç–∞ –∏–∑ env:",
      process.env.TELEGRAM_CHAT_ID ? "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω" : "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
    );
    console.log(
      "- –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ç–æ–∫–µ–Ω:",
      !process.env.TELEGRAM_BOT_TOKEN
    );
    console.log(
      "- –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π ID —á–∞—Ç–∞:",
      !process.env.TELEGRAM_CHAT_ID
    );
    console.log(
      "- –ò—Ç–æ–≥–æ–≤—ã–π —Ç–æ–∫–µ–Ω (–ø–µ—Ä–≤—ã–µ 5 —Å–∏–º–≤–æ–ª–æ–≤):",
      botToken.substring(0, 5) + "***"
    );
    console.log("- –ò—Ç–æ–≥–æ–≤—ã–π ID —á–∞—Ç–∞:", chatId);

    if (!botToken || !chatId) {
      console.error("–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è Telegram");
      return NextResponse.json(
        { error: "–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Å–µ—Ä–≤–µ—Ä–∞" },
        { status: 500 }
      );
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const text = `\nüì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\nüë§ –ò–º—è: ${name}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: ${phone}\n‚úâÔ∏è Email: ${
      email || "–ù–µ —É–∫–∞–∑–∞–Ω"
    }\nüí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${message || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}\n`;

    console.log("–ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:", text);

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫ Telegram API
    // –í–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∫ api.telegram.org –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à API –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    const telegramUrl =
      "https://api.telegram.org/bot" + botToken + "/sendMessage";

    console.log(
      "URL –∑–∞–ø—Ä–æ—Å–∞:",
      telegramUrl.replace(botToken, botToken.substring(0, 5) + "***")
    );

    const requestBody = {
      chat_id: chatId,
      text: text,
      parse_mode: "HTML",
    };
    console.log(
      "–î–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞:",
      JSON.stringify(requestBody).replace(chatId, "***")
    );

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API Telegram
    console.log("–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –≤ Telegram...");

    // –ú–µ—Ç–æ–¥ 1: –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ API Telegram
    const telegramResponse = await fetch(telegramUrl, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify(requestBody),
    });

    console.log("–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º:", telegramResponse.status);

    // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
    let responseText = "";
    try {
      responseText = await telegramResponse.text();
      console.log("–û—Ç–≤–µ—Ç –æ—Ç API Telegram (—Ç–µ–∫—Å—Ç):", responseText);
    } catch (error) {
      console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞:", error);
    }

    // –ü–∞—Ä—Å–∏–º JSON
    let telegramData;
    try {
      telegramData = JSON.parse(responseText);
      console.log("–û—Ç–≤–µ—Ç –æ—Ç API Telegram (–æ–±—ä–µ–∫—Ç):", telegramData);
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:", error);

      // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞,
      // –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –±–µ–∫–µ–Ω–¥
      try {
        // –ú–µ—Ç–æ–¥ 2: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–∏—Å Telegram Bot API —á–µ—Ä–µ–∑ HTTP –∑–∞–ø—Ä–æ—Å
        const response = await fetch(
          "https://n8n.neuropolis.ai/webhook/telegram-forwarder",
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              token: botToken,
              chat_id: chatId,
              text: text,
            }),
          }
        );

        if (response.ok) {
          console.log("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å!");
          return NextResponse.json({
            success: true,
            message: "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å",
          });
        } else {
          throw new Error("–†–µ–∑–µ—Ä–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: " + response.status);
        }
      } catch (backupError) {
        console.error(
          "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞:",
          backupError
        );
        return NextResponse.json(
          {
            error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–æ–≤",
            details: responseText,
          },
          { status: 500 }
        );
      }
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç Telegram
    if (!telegramResponse.ok || !telegramData.ok) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram:", telegramData);

      // –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ –≤—Ç–æ—Ä–æ–π –º–µ—Ç–æ–¥
      try {
        // –ú–µ—Ç–æ–¥ 2: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–∏—Å Telegram Bot API —á–µ—Ä–µ–∑ HTTP –∑–∞–ø—Ä–æ—Å
        const response = await fetch(
          "https://n8n.neuropolis.ai/webhook/telegram-forwarder",
          {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              token: botToken,
              chat_id: chatId,
              text: text,
            }),
          }
        );

        if (response.ok) {
          console.log("–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å!");
          return NextResponse.json({
            success: true,
            message: "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å",
          });
        } else {
          throw new Error("–†–µ–∑–µ—Ä–≤–Ω—ã–π —Å–µ—Ä–≤–∏—Å –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: " + response.status);
        }
      } catch (backupError) {
        console.error(
          "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞:",
          backupError
        );
        return NextResponse.json(
          {
            error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
            details: telegramData,
          },
          { status: 500 }
        );
      }
    }

    console.log("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram!");

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
    return NextResponse.json({
      success: true,
      message: "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
    });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:", error);
    return NextResponse.json(
      {
        error: "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞",
        details: (error as Error).message,
      },
      { status: 500 }
    );
  }
}
