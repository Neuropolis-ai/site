"use client";

import { useState } from "react";
import { useTheme } from "@/context/ThemeContext";
import { motion } from "framer-motion";
import { FiMail, FiPhone, FiMapPin } from "react-icons/fi";
import { supabase } from "@/lib/supabase";
import WorkflowAutomationContactForm from "@/components/workflow-automation/WorkflowAutomationContactForm";

export default function ContactPage() {
  const { isDark } = useTheme();
  const [formData, setFormData] = useState({
    name: "",
    email: "",
    phone: "",
    company: "",
    message: "",
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitStatus, setSubmitStatus] = useState<{
    type: "success" | "error" | null;
    message: string;
  }>({ type: null, message: "" });

  const handleChange = (
    e: React.ChangeEvent<
      HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement
    >
  ) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  const resetForm = () => {
    setFormData({ name: "", email: "", phone: "", company: "", message: "" });
  };

  const sendToTelegram = async () => {
    try {
      const BACKUP_BOT_TOKEN = "8020073798:AAHmXxi9XijA0z1k9JY2DzNpDI7j6ICqthI";
      const BACKUP_CHAT_ID = "-1002655068247";

      const botToken =
        process.env.NEXT_PUBLIC_TELEGRAM_BOT_TOKEN || BACKUP_BOT_TOKEN;
      const chatId = process.env.NEXT_PUBLIC_TELEGRAM_CHAT_ID || BACKUP_CHAT_ID;

      if (!botToken || !chatId) {
        console.error(
          "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Telegram –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è"
        );
        return {
          ok: false,
          error: "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã Telegram-–±–æ—Ç–∞",
        };
      }

      const text = `\nüì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ (–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ö–æ–Ω—Ç–∞–∫—Ç–æ–≤):\nüë§ –ò–º—è: ${
        formData.name
      }\nüè¢ –ö–æ–º–ø–∞–Ω–∏—è: ${formData.company || "–ù–µ —É–∫–∞–∑–∞–Ω–∞"}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: ${
        formData.phone || "–ù–µ —É–∫–∞–∑–∞–Ω"
      }\n‚úâÔ∏è Email: ${formData.email}\nüí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${
        formData.message || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
      }\n`;

      const url = `https://api.telegram.org/bot${botToken}/sendMessage`;
      const requestData = {
        chat_id: chatId,
        text: text,
        parse_mode: "Markdown",
      };

      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 10000);

      try {
        const response = await fetch(url, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Accept: "application/json",
          },
          body: JSON.stringify(requestData),
          signal: controller.signal,
        });

        clearTimeout(timeoutId);

        const responseText = await response.text();

        if (!response.ok) {
          console.error("Telegram API Error Response:", responseText);
          return {
            ok: false,
            error: `–û—à–∏–±–∫–∞ HTTP: ${response.status} ${response.statusText}. –û—Ç–≤–µ—Ç: ${responseText}`,
          };
        }

        try {
          const data = JSON.parse(responseText);
          if (!data.ok) {
            return {
              ok: false,
              error: `–û—à–∏–±–∫–∞ API Telegram: ${
                data.description || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
              }`,
            };
          }
          return { ok: true, data };
        } catch (parseError) {
          console.error("Error parsing Telegram response:", parseError);
          return {
            ok: false,
            error: `–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –æ—Ç–≤–µ—Ç–∞ Telegram: ${
              (parseError as Error).message
            }`,
          };
        }
      } catch (fetchError) {
        clearTimeout(timeoutId);
        if ((fetchError as Error).name === "AbortError") {
          return {
            ok: false,
            error: "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram",
          };
        }
        return {
          ok: false,
          error: `–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: ${
            (fetchError as Error).message
          }`,
        };
      }
    } catch (error) {
      return {
        ok: false,
        error: `–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: ${
          (error as Error).message
        }`,
      };
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsSubmitting(true);
    setSubmitStatus({ type: null, message: "" });

    try {
      if (!formData.name || !formData.email) {
        setSubmitStatus({
          type: "error",
          message: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–∏–º—è –∏ email).",
        });
        setIsSubmitting(false);
        return;
      }

      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(formData.email)) {
        setSubmitStatus({
          type: "error",
          message: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å.",
        });
        setIsSubmitting(false);
        return;
      }

      const { error: supabaseError } = await supabase.from("contacts").insert([
        {
          name: formData.name,
          email: formData.email,
          phone: formData.phone || null,
          company: formData.company || null,
          message: formData.message || null,
          created_at: new Date().toISOString(),
        },
      ]);

      if (supabaseError) {
        console.error("Supabase insert error:", supabaseError);
        throw new Error(
          `–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${supabaseError.message}`
        );
      }

      const telegramResult = await sendToTelegram();
      if (!telegramResult.ok) {
        console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:", telegramResult.error);
      }

      setSubmitStatus({
        type: "success",
        message:
          "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
      });
      resetForm();
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã:", error);
      setSubmitStatus({
        type: "error",
        message: `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: ${
          (error as Error).message
        }. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.`,
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∞–Ω–∏–º–∞—Ü–∏–∏
  const containerVariants = {
    hidden: { opacity: 0 },
    show: {
      opacity: 1,
      transition: {
        staggerChildren: 0.15,
      },
    },
  };

  // –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
  const inputClasses = `block w-full px-4 py-3 rounded-xl border border-gray-300 dark:border-gray-700 
    focus:ring-2 focus:ring-blue-500/50 focus:border-blue-500 bg-white dark:bg-gray-800/50 
    dark:text-white text-lg transition-colors duration-200 placeholder:text-gray-400 dark:placeholder:text-gray-500`;

  const labelClasses = `block text-base font-medium text-gray-700 dark:text-gray-300 mb-1.5`;

  return (
    <div className="flex flex-col min-h-screen">
      <motion.main
        variants={containerVariants}
        initial="hidden"
        animate="show"
        className="flex-grow bg-gradient-to-b from-blue-50/50 to-white dark:from-blue-950/10 dark:to-gray-950"
      >
        {/* –û—Å–Ω–æ–≤–Ω–æ–π —Ä–∞–∑–¥–µ–ª —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
        <div className="relative py-24 md:py-32 overflow-hidden">
          {/* –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç WorkflowAutomationContactForm */}
          <WorkflowAutomationContactForm
            title="–ù–∞—á–Ω–∏—Ç–µ –≤–Ω–µ–¥—Ä—è—Ç—å –ò–ò —É–∂–µ —Å–µ–≥–æ–¥–Ω—è"
            subtitle="–ü–æ–ª—É—á–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é –ò–ò-—Ä–µ—à–µ–Ω–∏–π –≤ –≤–∞—à–∏ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å—ã. –ù–∞—à–∏ —ç–∫—Å–ø–µ—Ä—Ç—ã –ø–æ–º–æ–≥—É—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è."
            submitButtonText="–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"
            showCompanyField={true}
            showPhoneField={true}
            showFeatures={true}
            showConfidentiality={true}
            useContainer={false}
            fullWidth={true}
            formId="contact-form"
            features={[
              {
                icon: <FiMail />,
                title: "–ò–ò-—Ä–µ—à–µ–Ω–∏—è –ø–æ–¥ –∫–ª—é—á",
                description:
                  "–†–∞–∑—Ä–∞–±–æ—Ç–∞–µ–º –∏ –≤–Ω–µ–¥—Ä–∏–º —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ò–ò-–∞–≥–µ–Ω—Ç–æ–≤, —É—á–∏—Ç—ã–≤–∞—é—â–∏—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞.",
              },
              {
                icon: <FiPhone />,
                title: "–ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è",
                description:
                  "–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É–µ–º —Ä—É—Ç–∏–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏, –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö –∏ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å—ã, –æ—Å–≤–æ–±–æ–∂–¥–∞—è –≤—Ä–µ–º—è –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö –∑–∞–¥–∞—á.",
              },
              {
                icon: <FiMapPin />,
                title: "–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å",
                description:
                  "–°–æ–∑–¥–∞–µ–º —Ä–µ—à–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞—Å—Ç—É—Ç –≤–º–µ—Å—Ç–µ —Å –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–µ–π –∏ –∞–¥–∞–ø—Ç–∏—Ä—É—é—Ç—Å—è –∫ –º–µ–Ω—è—é—â–∏–º—Å—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –±–∏–∑–Ω–µ—Å–∞.",
              },
            ]}
            confidentialityText="–ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –¥–æ–≤–µ—Ä–∏–µ –∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –≤—Å–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—É—é –≤—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç–µ –Ω–∞–º. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∑–∞–∫–æ–Ω–æ–¥–∞—Ç–µ–ª—å—Å—Ç–≤–æ–º."
            onSubmitSuccess={(formData) => {
              console.log("–§–æ—Ä–º–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞:", formData);
            }}
            customSubmit={async (formData) => {
              // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤ Supabase
              const { error: supabaseError } = await supabase
                .from("contacts")
                .insert([
                  {
                    name: formData.name,
                    email: formData.email,
                    phone: formData.phone || null,
                    company: formData.company || null,
                    message: formData.message || null,
                    created_at: new Date().toISOString(),
                  },
                ]);

              if (supabaseError) {
                console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Supabase:", supabaseError);
                throw new Error(`–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: ${supabaseError.message}`);
              }

              // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
              try {
                const BACKUP_BOT_TOKEN = "8020073798:AAHmXxi9XijA0z1k9JY2DzNpDI7j6ICqthI";
                const BACKUP_CHAT_ID = "-1002655068247";

                const botToken =
                  process.env.NEXT_PUBLIC_TELEGRAM_BOT_TOKEN || BACKUP_BOT_TOKEN;
                const chatId = process.env.NEXT_PUBLIC_TELEGRAM_CHAT_ID || BACKUP_CHAT_ID;

                if (!botToken || !chatId) {
                  console.error("–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã Telegram-–±–æ—Ç–∞");
                  return;
                }

                const text = `\nüì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ (–°—Ç—Ä–∞–Ω–∏—Ü–∞ –ö–æ–Ω—Ç–∞–∫—Ç–æ–≤):\nüë§ –ò–º—è: ${
                  formData.name
                }\nüè¢ –ö–æ–º–ø–∞–Ω–∏—è: ${formData.company || "–ù–µ —É–∫–∞–∑–∞–Ω–∞"}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: ${
                  formData.phone || "–ù–µ —É–∫–∞–∑–∞–Ω"
                }\n‚úâÔ∏è Email: ${formData.email}\nüí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${
                  formData.message || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                }\n`;

                const url = `https://api.telegram.org/bot${botToken}/sendMessage`;
                const requestData = {
                  chat_id: chatId,
                  text: text,
                  parse_mode: "Markdown",
                };

                const response = await fetch(url, {
                  method: "POST",
                  headers: {
                    "Content-Type": "application/json",
                    Accept: "application/json",
                  },
                  body: JSON.stringify(requestData),
                });

                if (!response.ok) {
                  console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:", response.statusText);
                }
              } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram:", error);
              }
            }}
            backgroundColor={
              isDark ? "rgba(15, 23, 42, 0.5)" : "rgba(255, 255, 255, 0.7)"
            }
            privacyPolicyUrl="/privacy-policy"
            requirePhoneField={true}
          />
        </div>
      </motion.main>
    </div>
  );
}
