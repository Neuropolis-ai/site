"use client";
import { useTheme } from "@/context/ThemeContext";
import { supabase } from "@/lib/supabase";
import { useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { CheckCircle, AlertTriangle, Mail, Phone, MapPin, MessageSquare } from "lucide-react";
import "../../style/card-line.css";
import Container from "../ui/Container";
import InputMask from "react-input-mask";

const Contact = () => {
  const { isDark } = useTheme();
  const [formData, setFormData] = useState({
    name: "",
    email: "",
    phone: "",
    company: "",
    message: "",
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [submitStatus, setSubmitStatus] = useState<{
    type: "success" | "error" | null;
    message: string;
  }>({ type: null, message: "" });
  const [error, setError] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [successMessage, setSuccessMessage] = useState("");

  const resetForm = () => {
    setFormData({ name: "", email: "", phone: "", company: "", message: "" });
  };

  const handleChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>
  ) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
  const sendToTelegram = async () => {
    try {
      // Hardcoded –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ä–µ–∂–∏–º–∞ production (–¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏)
      const BACKUP_BOT_TOKEN = "8020073798:AAHmXxi9XijA0z1k9JY2DzNpDI7j6ICqthI";
      const BACKUP_CHAT_ID = "-1002655068247";

      // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ env –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º backup
      const botToken =
        process.env.NEXT_PUBLIC_TELEGRAM_BOT_TOKEN || BACKUP_BOT_TOKEN;
      const chatId = process.env.NEXT_PUBLIC_TELEGRAM_CHAT_ID || BACKUP_CHAT_ID;

      console.log("–î–µ—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–ª—è Telegram:");
      console.log(
        "- botToken: ",
        botToken ? "–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–¥–ª–∏–Ω–∞: " + botToken.length + ")" : "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"
      );
      console.log("- chatId: ", chatId || "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");
      console.log(
        "- –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –∏–∑ .env? ",
        botToken === process.env.NEXT_PUBLIC_TELEGRAM_BOT_TOKEN
      );
      console.log(
        "- –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –∏–∑ .env? ",
        chatId === process.env.NEXT_PUBLIC_TELEGRAM_CHAT_ID
      );
      console.log(
        "- –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —Ç–æ–∫–µ–Ω? ",
        botToken === BACKUP_BOT_TOKEN
      );
      console.log("- –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π ID? ", chatId === BACKUP_CHAT_ID);

      if (!botToken || !chatId) {
        console.error(
          "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Telegram –∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ä–µ–∑–µ—Ä–≤–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è"
        );
        return {
          ok: false,
          error: "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã Telegram-–±–æ—Ç–∞",
        };
      }

      // –í–ê–ñ–ù–´–ô –®–ê–ì - –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
      if (!botToken.includes(":") || botToken.length < 20) {
        console.error(
          "–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç:",
          botToken.substring(0, 5) + "***"
        );
        return {
          ok: false,
          error: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞",
        };
      }

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
      const text = `\nüì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\nüë§ –ò–º—è: ${
        formData.name
      }\nüè¢ –ö–æ–º–ø–∞–Ω–∏—è: ${formData.company || "–ù–µ —É–∫–∞–∑–∞–Ω–∞"}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: ${
        formData.phone
      }\n‚úâÔ∏è Email: ${formData.email || "–ù–µ —É–∫–∞–∑–∞–Ω"}\nüí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: ${
        formData.message || "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
      }\n`;

      console.log("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram...");
      console.log("–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:", text);

      // –ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ API Telegram
      const url = `https://api.telegram.org/bot${botToken}/sendMessage`;
      console.log(
        "–°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ URL:",
        url.replace(botToken, botToken.substring(0, 5) + "***")
      );

      // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
      const requestData = {
        chat_id: chatId,
        text: text,
      };
      console.log(
        "–û—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ:",
        JSON.stringify(requestData).replace(chatId, "***")
      );

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç

      try {
        const response = await fetch(url, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Accept: "application/json",
          },
          mode: "cors",
          cache: "no-cache",
          credentials: "same-origin",
          body: JSON.stringify(requestData),
          signal: controller.signal,
        });

        // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–∞—É—Ç, —Ç–∞–∫ –∫–∞–∫ –∑–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω
        clearTimeout(timeoutId);

        console.log("–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º:", response.status);
        console.log("–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:", response.statusText);

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        let responseText;
        try {
          responseText = await response.text();
          console.log("–û—Ç–≤–µ—Ç API –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:", responseText);
        } catch (e) {
          console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞:", e);
          return {
            ok: false,
            error: `–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç: ${(e as Error).message}`,
          };
        }

        if (!response.ok) {
          const statusText = response.statusText;
          console.error(`–û—à–∏–±–∫–∞ HTTP: ${response.status} ${statusText}`);
          console.error("–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:", responseText);

          return {
            ok: false,
            error: `–û—à–∏–±–∫–∞ HTTP: ${response.status} ${statusText}. –î–µ—Ç–∞–ª–∏: ${responseText}`,
          };
        }

        // –ü–∞—Ä—Å–∏–º JSON-–æ—Ç–≤–µ—Ç –æ—Ç API Telegram
        let data;
        try {
          data = JSON.parse(responseText);
          console.log("–û—Ç–≤–µ—Ç –æ—Ç API Telegram (–æ–±—ä–µ–∫—Ç):", data);
        } catch (jsonError) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ JSON-–æ—Ç–≤–µ—Ç–∞:", jsonError);
          return {
            ok: false,
            error: `–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç API Telegram: ${responseText}`,
          };
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ –¥–∞–Ω–Ω—ã–º –æ—Ç API
        if (!data.ok) {
          console.error("–û—à–∏–±–∫–∞ API Telegram:", data);
          return {
            ok: false,
            error: `–û—à–∏–±–∫–∞ API Telegram: ${
              data.description || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
            }`,
          };
        }

        console.log("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram!");
        return { ok: true, data };
      } catch (fetchError) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ fetch-–∑–∞–ø—Ä–æ—Å–∞:", fetchError);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ –æ—à–∏–±–∫–∞ –≤—ã–∑–≤–∞–Ω–∞ —Ç–∞–π–º–∞—É—Ç–æ–º
        if ((fetchError as Error).name === "AbortError") {
          return {
            ok: false,
            error: "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
          };
        }

        return {
          ok: false,
          error: `–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: ${(fetchError as Error).message}`,
        };
      }
    } catch (error) {
      console.error("–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram:", error);
      return {
        ok: false,
        error: `–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Telegram: ${
          (error as Error).message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
        }`,
      };
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();

    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—à–∏–±–æ–∫ –∏ –∑–∞–≥—Ä—É–∑–∫–∏
    setError("");
    setIsLoading(true);
    setSuccessMessage("");
    setIsSubmitting(true);
    setSubmitStatus({ type: null, message: "" });

    try {
      console.log("–ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–æ—Ä–º—ã...");

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
      if (!formData.name || !formData.email) {
        console.error("–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è");
        setError("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è (–∏–º—è –∏ email)");
        setIsLoading(false);
        setIsSubmitting(false);
        return;
      }

      console.log("–§–æ—Ä–º–∞ –≤–∞–ª–∏–¥–Ω–∞, –ø—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ Supabase...");

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç –≤ Supabase
      const { data: contact, error: supabaseError } = await supabase
        .from("contacts")
        .insert([
          {
            name: formData.name,
            company: formData.company || null,
            phone: formData.phone || null,
            email: formData.email || null,
            message: formData.message || null,
          },
        ])
        .select();

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É Supabase, –µ—Å–ª–∏ –æ–Ω–∞ –≤–æ–∑–Ω–∏–∫–ª–∞
      if (supabaseError) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ Supabase:", supabaseError);
        setError(
          `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: ${
            supabaseError.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
          }`
        );
        setSubmitStatus({
          type: "error",
          message: `–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: ${
            supabaseError.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
          }`,
        });
        setIsLoading(false);
        setIsSubmitting(false);
        return;
      }

      console.log("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Supabase:", contact);

      // –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π API
      console.log("–ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π API...");
      let telegramResult = await sendViaServerApi();

      // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π API –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π –º–µ—Ç–æ–¥
      if (!telegramResult.ok) {
        console.log("–°–µ—Ä–≤–µ—Ä–Ω—ã–π –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º –∫–ª–∏–µ–Ω—Ç—Å–∫–∏–π...");
        console.log("–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞:", telegramResult.error);
        telegramResult = await sendToTelegram();
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å–ø–µ—à–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
      if (!telegramResult.ok) {
        console.error(
          "–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram:",
          telegramResult.error
        );
        setError(
          `–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É.`
        );
        setSubmitStatus({
          type: "error",
          message:
            "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É.",
        });
        setIsLoading(false);
        setIsSubmitting(false);
        return;
      }

      console.log("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram:", telegramResult);

      // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
      resetForm();
      setSuccessMessage("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!");
      setSubmitStatus({
        type: "success",
        message:
          "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
      });
    } catch (error) {
      console.error("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ä–º—ã:", error);
      setError(
        `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${(error as Error).message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}`
      );
      setSubmitStatus({
        type: "error",
        message: `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: ${
          (error as Error).message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
        }`,
      });
    } finally {
      setIsLoading(false);
      setIsSubmitting(false);
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π API
  const sendViaServerApi = async () => {
    try {
      console.log("–û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π API...");

      const response = await fetch("/api/telegram", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(formData),
      });

      console.log("–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ API:", response.status);

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
      let responseText;
      try {
        responseText = await response.text();
        console.log("–û—Ç–≤–µ—Ç API (—Ç–µ–∫—Å—Ç):", responseText);
      } catch (e) {
        console.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞:", e);
      }

      // –ü–∞—Ä—Å–∏–º JSON, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
      let data;
      try {
        data = JSON.parse(responseText || "{}");
        console.log("–û—Ç–≤–µ—Ç API (–æ–±—ä–µ–∫—Ç):", data);
      } catch (e) {
        console.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:", e);
        return {
          ok: false,
          error: `–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞: ${responseText || "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç"}`,
        };
      }

      if (!response.ok) {
        console.error("–û—à–∏–±–∫–∞ API:", data);
        return {
          ok: false,
          error: data.error || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è",
        };
      }

      console.log("–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API:", data);
      return { ok: true, data };
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ API:", error);
      return {
        ok: false,
        error: `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ API: ${(error as Error).message}`,
      };
    }
  };

  function OrganizationSchema() {
    const schema = {
      "@context": "https://schema.org",
      "@type": "Organization",
      name: "Neuropolis.ai",
      url: "https://neuropolis.ai",
      logo: "https://neuropolis.ai/logo.png",
      address: {
        "@type": "PostalAddress",
        streetAddress: "—É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 1",
        addressLocality: "–ú–æ—Å–∫–≤–∞",
        postalCode: "123456",
        addressCountry: "RU",
      },
      contactPoint: [
        {
          "@type": "ContactPoint",
          telephone: "+7-495-123-45-67",
          contactType: "customer support",
          areaServed: "RU",
          availableLanguage: ["Russian"],
        },
      ],
    };
    return (
      <script
        type="application/ld+json"
        dangerouslySetInnerHTML={{ __html: JSON.stringify(schema) }}
      />
    );
  }

  // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∞–Ω–∏–º–∞—Ü–∏–∏
  const containerVariants = {
    hidden: { opacity: 0 },
    show: {
      opacity: 1,
      transition: {
        staggerChildren: 0.12,
      },
    },
  };

  const itemVariants = {
    hidden: { opacity: 0, y: 15 },
    show: {
      opacity: 1,
      y: 0,
      transition: {
        duration: 0.4,
        ease: "easeOut",
      },
    },
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –≤–∏–∑—É–∞–ª—å–Ω—ã–º —ç—Ñ—Ñ–µ–∫—Ç–æ–º
  const inputClasses = `block w-full px-4 py-3.5 rounded-xl border-[1.5px] border-gray-200 dark:border-gray-700 
    focus:ring-2 focus:ring-blue-500/50 focus:border-blue-500 bg-white/90 dark:bg-gray-800/60 
    dark:text-white text-lg transition-all duration-200 placeholder:text-gray-400 dark:placeholder:text-gray-500
    shadow-sm hover:border-blue-200 dark:hover:border-blue-800/40`;

  const labelClasses = `block text-base font-medium text-gray-700 dark:text-gray-300 mb-1.5`;

  return (
    <motion.section
      className="relative py-24 md:py-32 px-4 overflow-hidden"
      id="contact"
      initial={{ opacity: 0 }}
      whileInView={{ opacity: 1 }}
      viewport={{ once: true }}
      transition={{ duration: 0.6 }}
    >
      {/* –£–ª—É—á—à–µ–Ω–Ω—ã–π —Ñ–æ–Ω —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞–º–∏ */}
      <div className="absolute inset-0 bg-gradient-to-b from-white/80 to-gray-50/90 dark:from-gray-900 dark:to-gray-950 -z-10"></div>
      
      {/* –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Ñ–æ–Ω–∞ */}
      <div className="absolute -top-32 -right-32 w-96 h-96 bg-gradient-to-br from-blue-200/20 to-blue-400/30 dark:from-blue-500/10 dark:to-blue-700/20 rounded-full blur-3xl -z-10"></div>
      <div className="absolute -bottom-32 -left-32 w-96 h-96 bg-gradient-to-tr from-indigo-200/20 to-indigo-400/30 dark:from-indigo-500/10 dark:to-indigo-700/20 rounded-full blur-3xl -z-10"></div>
      <div className="absolute top-1/4 left-1/2 transform -translate-x-1/2 w-[500px] h-[500px] bg-gradient-to-tr from-blue-300/5 to-indigo-300/10 dark:from-blue-600/5 dark:to-indigo-600/10 rounded-full blur-3xl -z-10"></div>

      <Container>
        {/* –ú–∏–∫—Ä–æ—Ä–∞–∑–º–µ—Ç–∫–∞ Organization */}
        <OrganizationSchema />
        
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ —Å –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º –ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é –≤ —Å—Ç–∏–ª–µ –¥—Ä—É–≥–∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ */}
        <motion.div
          className="max-w-4xl mx-auto mb-16 md:mb-20"
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          transition={{ duration: 0.5, delay: 0.1 }}
        >
          <div className="mb-6">
            <div className="inline-block px-5 py-1.5 rounded-full text-sm font-medium 
                           bg-gradient-to-r from-blue-50 to-indigo-50 text-blue-600 
                           dark:from-blue-900/30 dark:to-indigo-900/30 dark:text-blue-400 
                           border border-blue-100 dark:border-blue-800/30 shadow-sm">
              –ö–æ–Ω—Ç–∞–∫—Ç—ã
            </div>
          </div>
          
          <h2 className="text-3xl md:text-4xl lg:text-5xl font-bold text-gray-900 dark:text-white mb-5 leading-tight">
            –ì–æ—Ç–æ–≤—ã{" "}
            <span className="bg-clip-text text-transparent bg-gradient-to-r from-[#0167F3] to-[#399AFC]">
              –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å
            </span>{" "}
            –≤–∞—à –±–∏–∑–Ω–µ—Å —Å –ø–æ–º–æ—â—å—é –ò–ò?
          </h2>
          
          <p className="text-gray-600 dark:text-gray-300 text-lg md:text-xl leading-relaxed">
            –ü–æ–ª—É—á–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –ø–æ –≤–Ω–µ–¥—Ä–µ–Ω–∏—é –ò–ò-–∞–≥–µ–Ω—Ç–æ–≤ –≤ –≤–∞—à–∏
            –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å—ã. –ù–∞—à–∏ —ç–∫—Å–ø–µ—Ä—Ç—ã –ø–æ–º–æ–≥—É—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ
            —Å—Ü–µ–Ω–∞—Ä–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è.
          </p>
        </motion.div>

        {/* –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ–æ—Ä–º–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º —Å—Ç–µ–∫–ª–∞ */}
        <motion.div
          className="relative backdrop-blur-lg bg-white/70 dark:bg-gray-900/40 rounded-2xl p-8 md:p-10 max-w-4xl mx-auto
                     border border-white/60 dark:border-gray-700/40 shadow-xl overflow-hidden"
          initial={{ opacity: 0, y: 30 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          transition={{ duration: 0.6, delay: 0.2 }}
        >
          {/* –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤–Ω—É—Ç—Ä–∏ —Ñ–æ—Ä–º—ã */}
          <div className="absolute -top-24 -right-24 w-48 h-48 bg-gradient-to-br from-blue-400/10 to-indigo-400/10 dark:from-blue-400/20 dark:to-indigo-400/20 rounded-full blur-2xl"></div>
          <div className="absolute -bottom-24 -left-24 w-48 h-48 bg-gradient-to-tr from-indigo-400/10 to-blue-400/10 dark:from-indigo-400/20 dark:to-blue-400/20 rounded-full blur-2xl"></div>

          {submitStatus.type === "success" ? (
            <motion.div
              className="text-center py-10 px-6"
              initial={{ scale: 0.9, opacity: 0 }}
              animate={{ scale: 1, opacity: 1 }}
              transition={{ type: "spring", stiffness: 150, damping: 20 }}
            >
              {/* –£–ª—É—á—à–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏–∫–æ–Ω–∫–∏ —É—Å–ø–µ—Ö–∞ */}
              <div className="inline-flex items-center justify-center w-20 h-20 rounded-full bg-gradient-to-r from-[#0167F3] to-[#399AFC] text-white mb-8 shadow-lg shadow-blue-500/20 dark:shadow-blue-700/30">
                <svg
                  className="w-10 h-10"
                  fill="none"
                  stroke="currentColor"
                  viewBox="0 0 24 24"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth="2.5"
                    d="M5 13l4 4L19 7"
                  ></path>
                </svg>
              </div>
              
              {/* –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞ */}
              <h3 className="text-2xl md:text-3xl font-bold text-gray-800 dark:text-white mb-4">
                –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞—è–≤–∫—É!
              </h3>
              
              <p className="text-base md:text-lg text-gray-600 dark:text-gray-300 mb-8 max-w-lg mx-auto leading-relaxed">
                –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∏
                –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.
              </p>
              
              {/* –£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ */}
              <motion.button
                onClick={() => setSubmitStatus({ type: null, message: "" })}
                className="inline-flex items-center justify-center px-6 py-3.5 text-lg font-semibold rounded-xl 
                           text-white bg-gradient-to-r from-[#0167F3] to-[#399AFC] hover:opacity-90 shadow-lg 
                           shadow-blue-500/20 dark:shadow-blue-700/30 transition-all duration-300"
                whileHover={{ scale: 1.02, boxShadow: "0 10px 25px rgba(1, 103, 243, 0.3)" }}
                whileTap={{ scale: 0.98 }}
              >
                –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É
              </motion.button>
            </motion.div>
          ) : (
            <form onSubmit={handleSubmit} className="space-y-6 relative z-10">
              {/* –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π containerVariants –¥–ª—è stagger –ø–æ–ª–µ–π */}
              <motion.div
                variants={containerVariants}
                initial="hidden"
                animate="show"
                className="grid grid-cols-1 md:grid-cols-2 gap-x-6 md:gap-x-8 gap-y-6"
              >
                {/* –ü–æ–ª–µ –ò–º—è —Å –∏–∫–æ–Ω–∫–æ–π */}
                <motion.div variants={itemVariants}>
                  <label htmlFor="name" className={labelClasses}>
                    –ò–º—è*
                  </label>
                  <div className="relative">
                    <input
                      type="text"
                      id="name"
                      name="name"
                      value={formData.name}
                      onChange={handleChange}
                      required
                      className={`${inputClasses} pl-11`}
                      placeholder="–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤"
                    />
                    <div className="absolute left-3.5 top-1/2 transform -translate-y-1/2 text-blue-500 dark:text-blue-400">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                        <path d="M18 20a6 6 0 0 0-12 0"></path>
                        <circle cx="12" cy="10" r="4"></circle>
                      </svg>
                    </div>
                  </div>
                </motion.div>

                {/* –ü–æ–ª–µ Email —Å –∏–∫–æ–Ω–∫–æ–π */}
                <motion.div variants={itemVariants}>
                  <label htmlFor="email" className={labelClasses}>
                    Email*
                  </label>
                  <div className="relative">
                    <input
                      type="email"
                      id="email"
                      name="email"
                      value={formData.email}
                      onChange={handleChange}
                      required
                      className={`${inputClasses} pl-11`}
                      placeholder="ivan.ivanov@example.com"
                    />
                    <div className="absolute left-3.5 top-1/2 transform -translate-y-1/2 text-blue-500 dark:text-blue-400">
                      <Mail className="h-5 w-5" />
                    </div>
                  </div>
                </motion.div>

                {/* –ü–æ–ª–µ –¢–µ–ª–µ—Ñ–æ–Ω —Å –∏–∫–æ–Ω–∫–æ–π */}
                <motion.div variants={itemVariants}>
                  <label htmlFor="phone" className={labelClasses}>
                    –¢–µ–ª–µ—Ñ–æ–Ω
                  </label>
                  <div className="relative">
                    <InputMask
                      mask="+7 (999) 999-99-99"
                      type="tel"
                      id="phone"
                      name="phone"
                      value={formData.phone}
                      onChange={handleChange}
                      className={`${inputClasses} pl-11`}
                      placeholder="+7 (999) 123-45-67"
                    />
                    <div className="absolute left-3.5 top-1/2 transform -translate-y-1/2 text-blue-500 dark:text-blue-400">
                      <Phone className="h-5 w-5" />
                    </div>
                  </div>
                </motion.div>

                {/* –ü–æ–ª–µ –ö–æ–º–ø–∞–Ω–∏—è —Å –∏–∫–æ–Ω–∫–æ–π */}
                <motion.div variants={itemVariants}>
                  <label htmlFor="company" className={labelClasses}>
                    –ö–æ–º–ø–∞–Ω–∏—è
                  </label>
                  <div className="relative">
                    <input
                      type="text"
                      id="company"
                      name="company"
                      value={formData.company}
                      onChange={handleChange}
                      className={`${inputClasses} pl-11`}
                      placeholder="–û–û–û '–†–æ–º–∞—à–∫–∞'"
                    />
                    <div className="absolute left-3.5 top-1/2 transform -translate-y-1/2 text-blue-500 dark:text-blue-400">
                      <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                        <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
                        <polyline points="9 22 9 12 15 12 15 22"></polyline>
                      </svg>
                    </div>
                  </div>
                </motion.div>

                {/* –ü–æ–ª–µ –°–æ–æ–±—â–µ–Ω–∏–µ (–Ω–∞ –≤—Å—é —à–∏—Ä–∏–Ω—É) —Å –∏–∫–æ–Ω–∫–æ–π */}
                <motion.div variants={itemVariants} className="md:col-span-2">
                  <label htmlFor="message" className={labelClasses}>
                    –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                  </label>
                  <div className="relative">
                    <textarea
                      id="message"
                      name="message"
                      rows={5}
                      value={formData.message}
                      onChange={handleChange}
                      className={`${inputClasses} pl-11`}
                      placeholder="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ –æ –≤–∞—à–µ–π –∑–∞–¥–∞—á–µ –∏–ª–∏ –≤–æ–ø—Ä–æ—Å–µ..."
                    />
                    <div className="absolute left-3.5 top-6 text-blue-500 dark:text-blue-400">
                      <MessageSquare className="h-5 w-5" />
                    </div>
                  </div>
                </motion.div>
              </motion.div>

              {/* –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Å—Ç–∏–ª–µ–º */}
              {submitStatus.type === "error" && (
                <motion.div
                  initial={{ opacity: 0, y: -10 }}
                  animate={{ opacity: 1, y: 0 }}
                  className="p-4 rounded-xl flex items-center bg-red-50/80 text-red-700 dark:bg-red-900/20 dark:text-red-400 border border-red-200/70 dark:border-red-800/30 shadow-sm"
                >
                  <div className="mr-3 flex-shrink-0">
                    <AlertTriangle className="w-5 h-5" />
                  </div>
                  <div>{submitStatus.message}</div>
                </motion.div>
              )}

              {/* –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Å—Ç–∏–ª–µ–º */}
              <motion.div variants={itemVariants} className="text-center pt-2">
                <motion.button
                  type="submit"
                  disabled={isSubmitting}
                  className="inline-flex items-center justify-center px-8 py-3.5 text-lg font-semibold rounded-xl 
                    text-white bg-gradient-to-r from-[#0167F3] to-[#399AFC] shadow-lg shadow-blue-500/20 dark:shadow-blue-700/30 
                    transition-all duration-300 hover:shadow-blue-500/30 dark:hover:shadow-blue-700/50"
                  whileHover={{ scale: 1.02, boxShadow: "0 10px 25px rgba(1, 103, 243, 0.3)" }}
                  whileTap={{ scale: 0.98 }}
                >
                  {isSubmitting ? (
                    <>
                      <svg
                        className="animate-spin -ml-1 mr-3 h-5 w-5 text-white"
                        xmlns="http://www.w3.org/2000/svg"
                        fill="none"
                        viewBox="0 0 24 24"
                      >
                        <circle
                          className="opacity-25"
                          cx="12"
                          cy="12"
                          r="10"
                          stroke="currentColor"
                          strokeWidth="4"
                        ></circle>
                        <path
                          className="opacity-75"
                          fill="currentColor"
                          d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                        ></path>
                      </svg>
                      –û—Ç–ø—Ä–∞–≤–∫–∞...
                    </>
                  ) : (
                    "–ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é"
                  )}
                </motion.button>
              </motion.div>
            </form>
          )}
        </motion.div>

        {/* –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ–º –ø–æ –ª–µ–≤–æ–º—É –∫—Ä–∞—é */}
        <motion.div
          className="mt-20 max-w-4xl mx-auto"
          initial={{ opacity: 0, y: 20 }}
          whileInView={{ opacity: 1, y: 0 }}
          viewport={{ once: true }}
          transition={{ duration: 0.5, delay: 0.1 }}
        >
          <h3 className="text-2xl md:text-3xl font-bold text-gray-900 dark:text-white mb-8">
            –°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é
          </h3>
          
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            {/* Email */}
            <motion.div 
              className="flex flex-col items-center p-6 rounded-2xl bg-white/60 dark:bg-gray-900/40 backdrop-blur-sm border border-gray-100/80 dark:border-gray-800/40 shadow-lg shadow-blue-500/5 dark:shadow-blue-900/10 hover:shadow-blue-500/10 dark:hover:shadow-blue-900/20 transition-all duration-300"
              whileHover={{ y: -5, boxShadow: "0 15px 30px rgba(1, 103, 243, 0.1)" }}
            >
              <div className="flex-shrink-0 mb-5 w-14 h-14 rounded-xl bg-gradient-to-br from-blue-100 to-blue-200 dark:from-blue-900/50 dark:to-blue-800/50 flex items-center justify-center shadow-md shadow-blue-500/10 dark:shadow-blue-700/20">
                <Mail className="w-6 h-6 text-blue-600 dark:text-blue-400" />
              </div>
              <h4 className="text-lg font-semibold text-gray-700 dark:text-gray-200 mb-2">
                Email
              </h4>
              <a
                href="mailto:agent@neuropolis.ai"
                className="text-blue-600 dark:text-blue-400 text-lg hover:underline transition-all font-medium"
              >
                agent@neuropolis.ai
              </a>
            </motion.div>

            {/* –¢–µ–ª–µ—Ñ–æ–Ω */}
            <motion.div 
              className="flex flex-col items-center p-6 rounded-2xl bg-white/60 dark:bg-gray-900/40 backdrop-blur-sm border border-gray-100/80 dark:border-gray-800/40 shadow-lg shadow-blue-500/5 dark:shadow-blue-900/10 hover:shadow-blue-500/10 dark:hover:shadow-blue-900/20 transition-all duration-300"
              whileHover={{ y: -5, boxShadow: "0 15px 30px rgba(1, 103, 243, 0.1)" }}
            >
              <div className="flex-shrink-0 mb-5 w-14 h-14 rounded-xl bg-gradient-to-br from-blue-100 to-blue-200 dark:from-blue-900/50 dark:to-blue-800/50 flex items-center justify-center shadow-md shadow-blue-500/10 dark:shadow-blue-700/20">
                <Phone className="w-6 h-6 text-blue-600 dark:text-blue-400" />
              </div>
              <h4 className="text-lg font-semibold text-gray-700 dark:text-gray-200 mb-2">
                –¢–µ–ª–µ—Ñ–æ–Ω
              </h4>
              <a
                href="tel:+79601078900"
                className="text-blue-600 dark:text-blue-400 text-lg hover:underline transition-all font-medium"
              >
                +7 960 107-89-00
              </a>
            </motion.div>

            {/* –ê–¥—Ä–µ—Å */}
            <motion.div 
              className="flex flex-col items-center p-6 rounded-2xl bg-white/60 dark:bg-gray-900/40 backdrop-blur-sm border border-gray-100/80 dark:border-gray-800/40 shadow-lg shadow-blue-500/5 dark:shadow-blue-900/10 hover:shadow-blue-500/10 dark:hover:shadow-blue-900/20 transition-all duration-300"
              whileHover={{ y: -5, boxShadow: "0 15px 30px rgba(1, 103, 243, 0.1)" }}
            >
              <div className="flex-shrink-0 mb-5 w-14 h-14 rounded-xl bg-gradient-to-br from-blue-100 to-blue-200 dark:from-blue-900/50 dark:to-blue-800/50 flex items-center justify-center shadow-md shadow-blue-500/10 dark:shadow-blue-700/20">
                <MapPin className="w-6 h-6 text-blue-600 dark:text-blue-400" />
              </div>
              <h4 className="text-lg font-semibold text-gray-700 dark:text-gray-200 mb-2">
                –ê–¥—Ä–µ—Å
              </h4>
              <p className="text-gray-800 dark:text-gray-200 text-lg font-medium">
                –†–æ—Å—Å–∏—è, –í–æ—Ä–æ–Ω–µ–∂
              </p>
            </motion.div>
          </div>
        </motion.div>
      </Container>
    </motion.section>
  );
};

export default Contact;
