// –¢–∏–ø—ã –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
type EventCategory = 
  | 'ab_testing' 
  | 'engagement' 
  | 'navigation' 
  | 'conversion' 
  | 'scroll_depth'
  | 'user_interaction';

interface AnalyticsEventOptions {
  event_category?: EventCategory;
  event_label?: string;
  value?: number;
  [key: string]: any; // –î–ª—è –ª—é–±—ã—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ –≤ Google Analytics –∏ –¥—Ä—É–≥–∏–µ —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
 */
export const trackEvent = (
  action: string, 
  options: AnalyticsEventOptions = {}
): void => {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Google Analytics
  if (typeof window !== 'undefined' && 'gtag' in window) {
    window.gtag('event', action, {
      event_category: options.event_category || 'general',
      event_label: options.event_label,
      value: options.value,
      ...options // –ü–µ—Ä–µ–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    });
    
    // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
    if (process.env.NODE_ENV === 'development') {
      console.log(`üîç Analytics [${options.event_category || 'general'}]: ${action}`, options);
    }
  }
};

/**
 * –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –≤ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
 */
export const trackABTestVariant = (
  testName: string, 
  variant: string, 
  variantIndex: number
): void => {
  trackEvent('variant_shown', {
    event_category: 'ab_testing',
    event_label: variant,
    value: variantIndex,
    test_name: testName
  });
  
  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–∞
  if (typeof window !== 'undefined') {
    localStorage.setItem(`ab_test_${testName}`, JSON.stringify({
      variant,
      index: variantIndex,
      timestamp: new Date().toISOString()
    }));
  }
};

/**
 * –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏ –≤ A/B —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
 */
export const trackABTestConversion = (
  testName: string, 
  action: string,
  options: AnalyticsEventOptions = {}
): void => {
  // –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç
  let variantData = null;
  
  if (typeof window !== 'undefined') {
    const savedData = localStorage.getItem(`ab_test_${testName}`);
    if (savedData) {
      try {
        variantData = JSON.parse(savedData);
      } catch (e) {
        console.error('Failed to parse AB test data', e);
      }
    }
  }
  
  // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –≤–∞—Ä–∏–∞–Ω—Ç–µ, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö –∫ —Å–æ–±—ã—Ç–∏—é
  if (variantData) {
    trackEvent(`${testName}_conversion`, {
      event_category: 'ab_testing',
      event_label: variantData.variant,
      value: variantData.index,
      action,
      ...options
    });
  } else {
    // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –≤—Å–µ —Ä–∞–≤–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
    trackEvent(`${testName}_conversion`, {
      event_category: 'ab_testing',
      action,
      ...options
    });
  }
};

/**
 * –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –≥–ª—É–±–∏–Ω—ã –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
 */
export const setupScrollDepthTracking = (
  thresholds: number[] = [25, 50, 75, 90, 100],
  selector: string = 'body'
): void => {
  if (typeof window === 'undefined') return;
  
  // –•—Ä–∞–Ω–∏—Ç —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –ø–æ—Ä–æ–≥–∏
  const sentThresholds = new Set<number>();
  
  const calculateScrollPercentage = () => {
    const element = document.querySelector(selector);
    if (!element) return 0;
    
    const windowHeight = window.innerHeight;
    const scrollTop = window.scrollY;
    const elementHeight = element.scrollHeight;
    const visibleHeight = Math.min(windowHeight, elementHeight);
    
    // –í—ã—á–∏—Å–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≤–æ–∑–º–æ–∂–Ω—É—é –ø—Ä–æ–∫—Ä—É—Ç–∫—É
    const maxScroll = elementHeight - visibleHeight;
    if (maxScroll <= 0) return 100;
    
    // –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
    return Math.min(100, Math.floor((scrollTop / maxScroll) * 100));
  };
  
  const checkScrollDepth = () => {
    const scrollPercentage = calculateScrollPercentage();
    
    for (const threshold of thresholds) {
      if (scrollPercentage >= threshold && !sentThresholds.has(threshold)) {
        trackEvent('scroll_depth', {
          event_category: 'scroll_depth',
          event_label: `${threshold}%`,
          value: threshold
        });
        sentThresholds.add(threshold);
      }
    }
  };
  
  // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ —Å –¥–µ–±–∞—É–Ω—Å–∏–Ω–≥–æ–º
  let timeout: NodeJS.Timeout | null = null;
  
  window.addEventListener('scroll', () => {
    if (timeout) clearTimeout(timeout);
    timeout = setTimeout(checkScrollDepth, 250);
  });
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  window.addEventListener('load', checkScrollDepth);
}; 